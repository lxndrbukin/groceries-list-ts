{"mappings":"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","sources":["src/views/View.ts","src/components/Header.ts","node_modules/nanoid/index.browser.js","src/components/ListForm.ts","src/views/ViewCollection.ts","src/components/ListItem.ts","src/components/List.ts","src/components/ListContainer.ts","src/models/Model.ts","src/models/Attributes.ts","src/models/Events.ts","src/models/User.ts","src/index.ts","src/components/App.ts"],"sourcesContent":["import { Model } from '../models/Model';\r\n\r\nexport abstract class View<T extends Model<K>, K> {\r\n  regions: { [key: string]: Element; } = {};\r\n  constructor(public parent: Element, public model: T) {\r\n    this.bindModel();\r\n  }\r\n\r\n  abstract template(): string;\r\n\r\n  regionsMap(): { [key: string]: string; } {\r\n    return {};\r\n  }\r\n\r\n  eventsMap(): { [key: string]: () => void; } {\r\n    return {};\r\n  }\r\n\r\n  bindModel(): void {\r\n    this.model.on('change', () => {\r\n      this.render();\r\n    });\r\n  }\r\n\r\n  mapRegions(fragment: DocumentFragment): void {\r\n    const regionsMap = this.regionsMap();\r\n    for (let key in regionsMap) {\r\n      const selector = regionsMap[key];\r\n      const el = fragment.querySelector(selector);\r\n      if (el) {\r\n        this.regions[key] = el;\r\n      }\r\n    }\r\n  }\r\n\r\n  bindEvents(fragment: DocumentFragment): void {\r\n    const eventsMap = this.eventsMap();\r\n    for (let eventKey in eventsMap) {\r\n      const [eventName, selector] = eventKey.split(':');\r\n      fragment.querySelectorAll(selector).forEach((element: Element): void => {\r\n        element.addEventListener(eventName, eventsMap[eventKey]);\r\n      });\r\n    }\r\n  }\r\n\r\n  onRender(): void { }\r\n\r\n  render(): void {\r\n    this.parent.innerHTML = '';\r\n    const templateEl = document.createElement('template');\r\n    templateEl.innerHTML = this.template();\r\n    this.bindEvents(templateEl.content);\r\n    this.mapRegions(templateEl.content);\r\n    this.onRender();\r\n    this.parent.appendChild(templateEl.content);\r\n  }\r\n}\r\n","import { View } from '../views/View';\r\nimport { User } from '../models/User';\r\nimport { Props } from './types';\r\n\r\nexport class Header extends View<User, Props> {\r\n  template(): string {\r\n    return /*html*/ `\r\n      <span>Groceries List</span>\r\n    `;\r\n  }\r\n}\r\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { nanoid } from 'nanoid';\r\nimport { View } from '../views/View';\r\nimport { User } from '../models/User';\r\nimport { Props } from './types';\r\n\r\nexport class ListForm extends View<User, Props> {\r\n  eventsMap(): { [key: string]: (e?: any) => void; } {\r\n    return {\r\n      'submit:.list-form': this.onFormSubmit\r\n    };\r\n  }\r\n\r\n  onFormSubmit = (e: SubmitEvent): void => {\r\n    e.preventDefault();\r\n    if (!e.target) {\r\n      return;\r\n    }\r\n    if ((<HTMLFormElement>e.target).listItem.value === '') {\r\n      return;\r\n    }\r\n    const item = {\r\n      id: nanoid(),\r\n      data: (<HTMLFormElement>e.target).listItem.value,\r\n      editing: false\r\n    };\r\n    this.model.save(item);\r\n    (<HTMLFormElement>e.target).listItem.value = '';\r\n  };\r\n\r\n  template(): string {\r\n    return /*html*/ `\r\n      <form class='list-form'>\r\n        <input class='form-input' type='text' name='listItem' />\r\n        <button class='btn add'>\r\n          <i class='fa-solid fa-plus'></i>\r\n        </button>\r\n      </form>\r\n    `;\r\n  }\r\n}","import { Model } from '../models/Model';\r\nimport { Props } from '../components/types';\r\n\r\nexport abstract class ViewCollection<T extends Model<K>, K> {\r\n  constructor(public parent: Element, public model: T) { }\r\n\r\n  abstract renderItem(itemParent: Element, item: Props): void;\r\n\r\n  render(): void {\r\n    this.parent.innerHTML = '';\r\n    const templateEl = document.createElement('template');\r\n    const items = this.model.get();\r\n    for (let item of items) {\r\n      const itemParent = document.createElement('div');\r\n      this.renderItem(itemParent, item as Props);\r\n      templateEl.content.appendChild(itemParent);\r\n\r\n    }\r\n    this.parent.appendChild(templateEl.content);\r\n  }\r\n}","import { View } from '../views/View';\r\nimport { User } from '../models/User';\r\nimport { Props } from './types';\r\n\r\nexport class ListItem extends View<User, Props> {\r\n  constructor(public parent: Element, public model: User, public item: Props) {\r\n    super(parent, model);\r\n  }\r\n\r\n  eventsMap(): { [key: string]: () => void; } {\r\n    return {\r\n      'click:.del': this.onClickDelete,\r\n      'click:.edit': this.showEditOnClick,\r\n      'click:.save': this.onClickSetUpdate,\r\n    };\r\n  }\r\n\r\n  onClickDelete = (): void => {\r\n    this.model.delete(this.item);\r\n  };\r\n\r\n  showEditOnClick = (): void => {\r\n    this.item.editing = !this.item.editing;\r\n    this.model.trigger('change');\r\n  };\r\n\r\n  onClickSetUpdate = (): void => {\r\n    const input = this.parent.querySelector('input');\r\n    if (input) {\r\n      const update = {\r\n        id: this.item.id,\r\n        data: input.value,\r\n        editing: false\r\n      };\r\n      this.model.set(update);\r\n    }\r\n  };\r\n\r\n  renderEdit(): string {\r\n    if (!this.item.editing) {\r\n      return /*html*/ `\r\n        <div class='list-item'>\r\n          <div class='list-item-data'>\r\n            <span>${this.item.data}</span>\r\n          </div>\r\n          <div class='list-item-btns'>\r\n            <button class='btn edit'>\r\n              <i class='fa-solid fa-pen-to-square'></i>\r\n            </button>\r\n            <button class='btn del'>\r\n              <i class='fa-solid fa-trash'></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      `;\r\n    }\r\n    return /*html*/ `\r\n      <div class='list-item'>\r\n        <div class='list-item-data'>\r\n          <input value='${this.item.data}' />\r\n        </div>\r\n        <div class='list-item-btns'>\r\n          <button class='btn save'>\r\n            <i class='fa-solid fa-file'></i>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  template(): string {\r\n    return this.renderEdit();\r\n  }\r\n}","import { ViewCollection } from '../views/ViewCollection';\r\nimport { User } from '../models/User';\r\nimport { Props } from './types';\r\nimport { ListItem } from './ListItem';\r\n\r\nexport class List extends ViewCollection<User, Props> {\r\n  constructor(public parent: Element, public model: User) {\r\n    super(parent, model);\r\n  }\r\n\r\n  renderItem(itemParent: Element, item: Props): void {\r\n    new ListItem(itemParent, this.model, item).render();\r\n  }\r\n}","import { View } from '../views/View';\r\nimport { User } from '../models/User';\r\nimport { Props } from './types';\r\nimport { ListForm } from './ListForm';\r\nimport { List } from './List';\r\n\r\n\r\nexport class ListContainer extends View<User, Props> {\r\n  regionsMap(): { [key: string]: string; } {\r\n    return {\r\n      listForm: '.list-form-wrapper',\r\n      list: '.list',\r\n    };\r\n  }\r\n\r\n  onRender(): void {\r\n    new ListForm(this.regions.listForm, this.model).render();\r\n    new List(this.regions.list, this.model).render();\r\n  }\r\n\r\n  template(): string {\r\n    return /*html*/ `\r\n      <div class='container'>\r\n        <div class='list-form-wrapper'></div>\r\n        <div class='list'></div>\r\n      </div>\r\n    `;\r\n  }\r\n}\r\n","export interface ModelAttributes<T> {\r\n  set(update: T): void;\r\n  get(): T[];\r\n  save(item: T): void;\r\n  delete(item: T): void;\r\n}\r\n\r\nexport interface ModelEvents {\r\n  on(eventName: string, callback: () => void): void;\r\n  trigger(eventName: string): void;\r\n}\r\n\r\nexport class Model<T> {\r\n  constructor(public attrs: ModelAttributes<T>, public events: ModelEvents) { }\r\n\r\n  get on() {\r\n    return this.events.on;\r\n  }\r\n\r\n  get trigger() {\r\n    return this.events.trigger;\r\n  }\r\n\r\n  set(update: T): void {\r\n    this.attrs.set(update);\r\n    this.events.trigger('change');\r\n  }\r\n\r\n  get(): T[] {\r\n    return this.attrs.get();\r\n  }\r\n\r\n  save(item: T): void {\r\n    this.attrs.save(item);\r\n    this.events.trigger('change');\r\n  }\r\n\r\n  delete(item: T): void {\r\n    this.attrs.delete(item);\r\n    this.events.trigger('change');\r\n  }\r\n}","interface HasId {\r\n  id: string;\r\n}\r\n\r\nexport class Atrributes<T extends HasId> {\r\n  constructor(private data: T[]) { }\r\n\r\n  get(): T[] {\r\n    return this.data;\r\n  }\r\n\r\n  set(update: T): void {\r\n    const index = this.data.findIndex((item: T) => item.id === update.id);\r\n    this.data[index] = {\r\n      ...this.data[index],\r\n      ...update\r\n    };\r\n  }\r\n\r\n  save(item: T): void {\r\n    this.data.push(item);\r\n  }\r\n\r\n  delete(item: T): void {\r\n    const updatedList = this.data.filter((dataItem: T) => {\r\n      return dataItem.id !== item.id;\r\n    });\r\n    this.data = updatedList;\r\n  }\r\n}","type Callback = () => void;\r\n\r\nexport class Events {\r\n  events: { [key: string]: Callback[]; } = {};\r\n\r\n  on = (eventName: string, callback: Callback): void => {\r\n    const handlers = this.events[eventName] || [];\r\n    handlers.push(callback);\r\n    this.events[eventName] = handlers;\r\n  };\r\n\r\n  trigger = (eventName: string): void => {\r\n    const handlers = this.events[eventName];\r\n    if (!handlers || !handlers.length) {\r\n      return;\r\n    }\r\n    handlers.forEach((callback: Callback): void => callback());\r\n  };\r\n}","import { Model } from './Model';\r\nimport { Atrributes } from './Attributes';\r\nimport { Events } from './Events';\r\nimport { Props } from '../components/types';\r\n\r\nexport class User extends Model<Props> {\r\n  static build(attrs: Props[]): User {\r\n    return new User(new Atrributes<Props>(attrs), new Events());\r\n  }\r\n}","import './styles.css';\r\nimport { App } from './components/App';\r\nimport { User } from './models/User';\r\n\r\nconst userModel = User.build([]);\r\n\r\nconst root = document.querySelector('#root');\r\n\r\nif (root) {\r\n  new App(root, userModel).render();\r\n}\r\n","import { View } from '../views/View';\r\nimport { User } from '../models/User';\r\nimport { Props } from './types';\r\nimport { Header } from './Header';\r\nimport { ListContainer } from './ListContainer';\r\n\r\nexport class App extends View<User, Props> {\r\n\r\n  regionsMap(): { [key: string]: string; } {\r\n    return {\r\n      header: '.header',\r\n      container: '.container-wrapper',\r\n    };\r\n  }\r\n\r\n  onRender(): void {\r\n    new Header(this.regions.header, this.model).render();\r\n    new ListContainer(this.regions.container, this.model).render();\r\n  }\r\n\r\n  template(): string {\r\n    return /*html*/ `\r\n      <div class='app'>\r\n        <header class='header'></header>\r\n        <div class='container-wrapper'></div>\r\n      </div>\r\n    `;\r\n  }\r\n}\r\n"],"names":["$de969e1b8e9a7980$export$27a5bd065ad55220","constructor","parent","model","regions","this","bindModel","regionsMap","eventsMap","on","render","mapRegions","fragment","key","selector","el","querySelector","bindEvents","eventKey","eventName","split","querySelectorAll","forEach","element","addEventListener","onRender","innerHTML","templateEl","document","createElement","template","content","appendChild","$b7e7587bc22d1cbd$export$8b251419efc915eb","$f00a97eed1786a48$export$ac4959f4f1338dfc","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","$426537fb6d9a94f2$export$1658773ce8ea0c64","onFormSubmit","e","preventDefault","target","listItem","value","item","data","editing","save","$a5d9540e3eda7d9d$export$ff20b327de53fba7","items","get","itemParent","renderItem","$85733f6e6d9bc544$export$a7b06bfba60a8a78","super","onClickDelete","delete","showEditOnClick","trigger","onClickSetUpdate","input","update","set","renderEdit","$e3892754842780c8$export$54c2e3dc7acea9f5","$7261775fbdfe706c$export$122a2a667e12876b","listForm","list","$073ee871a4a37570$export$a1edc412be3e1841","attrs","events","$146350aa8f0e86c0$export$4e1d919d728f6ded","index","findIndex","push","updatedList","filter","dataItem","$fa7b9ee35f96663f$export$ada873a34909da65","callback","handlers","length","$3dc53ff74a85f74a$export$1f44aaf2ec115b54","static","$b4e14b6b8da86996$var$userModel","build","$b4e14b6b8da86996$var$root","header","container"],"version":3,"file":"index.04894161.js.map"}